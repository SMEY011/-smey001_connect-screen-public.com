"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[430],{4920:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var t=s(5893),i=s(1151);const l={id:"queries",title:"Queries"},c=void 0,r={id:"queries",title:"Queries",description:"Queries are one of the main building blocks for the React Native Testing Library. They enable you to find relevant elements in the element tree, which represents the your application's user interface when running under tests.",source:"@site/docs/Queries.md",sourceDirName:".",slug:"/queries",permalink:"/react-native-testing-library/docs/queries",draft:!1,unlisted:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/Queries.md",tags:[],version:"current",frontMatter:{id:"queries",title:"Queries"},sidebar:"docs",previous:{title:"Screen object",permalink:"/react-native-testing-library/docs/screen"},next:{title:"User Event interactions",permalink:"/react-native-testing-library/docs/user-event"}},a={},d=[{value:"Accessing queries",id:"accessing-queries",level:2},{value:"Using <code>screen</code> object",id:"using-screen-object",level:3},{value:"Using <code>render</code> result",id:"using-render-result",level:3},{value:"Query parts",id:"query-parts",level:2},{value:"Query variant",id:"query-variant",level:2},{value:"<code>getBy*</code> queries",id:"get-by",level:3},{value:"<code>getAllBy*</code> queries",id:"get-all-by",level:3},{value:"<code>queryBy*</code> queries",id:"query-by",level:3},{value:"<code>queryAllBy*</code> queries",id:"query-all-by",level:3},{value:"<code>findBy*</code> queries",id:"find-by",level:3},{value:"<code>findAllBy*</code> queries",id:"find-all-by",level:3},{value:"Query predicates",id:"query-predicates",level:2},{value:"<code>*ByRole</code>",id:"by-role",level:3},{value:"Options",id:"by-role-options",level:4},{value:"<code>*ByLabelText</code>",id:"by-label-text",level:3},{value:"<code>*ByPlaceholderText</code>",id:"by-placeholder-text",level:3},{value:"<code>*ByDisplayValue</code>",id:"by-display-value",level:3},{value:"<code>*ByText</code>",id:"by-text",level:3},{value:"<code>*ByHintText</code>",id:"by-hint-text",level:3},{value:"<code>*ByTestId</code>",id:"by-test-id",level:3},{value:"<code>*ByA11yState</code>, <code>ByAccessibilityState</code> (deprecated)",id:"by-accessibility-state",level:3},{value:"Default state for: <code>disabled</code>, <code>selected</code>, and <code>busy</code> keys",id:"default-state-for-disabled-selected-and-busy-keys",level:4},{value:"Default state for: <code>checked</code> and <code>expanded</code> keys",id:"default-state-for-checked-and-expanded-keys",level:4},{value:"<code>*ByA11yValue</code>, <code>*ByAccessibilityValue</code> (deprecated)",id:"by-accessibility-value",level:3},{value:"Common options",id:"common-options",level:3},{value:"<code>includeHiddenElements</code> option",id:"includehiddenelements-option",level:4},{value:"TextMatch type",id:"textmatch-type",level:2},{value:"Examples",id:"examples",level:3},{value:"Options",id:"text-match-options",level:3},{value:"Precision",id:"precision",level:4},{value:"Normalization",id:"normalization",level:4},{value:"Normalization Examples",id:"normalization-examples",level:5},{value:"Legacy unit testing helpers",id:"legacy-unit-testing-helpers",level:2},{value:"<code>UNSAFE_ByType</code>",id:"unsafe_bytype",level:3},{value:"<code>UNSAFE_ByProps</code>",id:"unsafe_byprops",level:3}];function o(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Queries are one of the main building blocks for the React Native Testing Library. They enable you to find relevant elements in the element tree, which represents the your application's user interface when running under tests."}),"\n",(0,t.jsx)(n.h2,{id:"accessing-queries",children:"Accessing queries"}),"\n",(0,t.jsxs)(n.p,{children:["All queries described below are accessible in two main ways: through the ",(0,t.jsx)(n.code,{children:"screen"})," object or by capturing the ",(0,t.jsx)(n.code,{children:"render"})," function call result."]}),"\n",(0,t.jsxs)(n.h3,{id:"using-screen-object",children:["Using ",(0,t.jsx)(n.code,{children:"screen"})," object"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { render, screen } from \'@testing-library/react-native\';\n\ntest(\'accessing queries using "screen" object\', () => {\n  render(...);\n\n  screen.getByRole("button", { name: "Start" });\n})\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The modern and recommended way of accessing queries is to use the ",(0,t.jsx)(n.code,{children:"screen"})," object exported by the ",(0,t.jsx)(n.code,{children:"@testing-library/react-native"})," package. This object will contain methods of all available queries bound to the most recently rendered UI."]}),"\n",(0,t.jsxs)(n.h3,{id:"using-render-result",children:["Using ",(0,t.jsx)(n.code,{children:"render"})," result"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { render } from \'@testing-library/react-native\';\n\ntest(\'accessing queries using "render" result\', () => {\n  const { getByRole } = render(...);\n  getByRole("button", { name: "Start" });\n})\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The classic way is to capture query functions, as they are returned from the ",(0,t.jsx)(n.code,{children:"render"})," function call. This provides access to the same functions as in the case of the ",(0,t.jsx)(n.code,{children:"screen"})," object."]}),"\n",(0,t.jsx)(n.h2,{id:"query-parts",children:"Query parts"}),"\n",(0,t.jsxs)(n.p,{children:["Each query is composed of two parts: variant and predicate, which are separated by the ",(0,t.jsx)(n.code,{children:"by"})," word in the middle of the name."]}),"\n",(0,t.jsx)(n.p,{children:"Consider the following query:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"getByRole()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For this query, ",(0,t.jsx)(n.code,{children:"getBy*"})," is the query variant, and ",(0,t.jsx)(n.code,{children:"*ByRole"})," is the predicate."]}),"\n",(0,t.jsx)(n.h2,{id:"query-variant",children:"Query variant"}),"\n",(0,t.jsx)(n.p,{children:"The query variants describe the expected number (and timing) of matching elements, so they differ in their return type."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Variant"}),(0,t.jsx)(n.th,{children:"Assertion"}),(0,t.jsx)(n.th,{children:"Return type"}),(0,t.jsx)(n.th,{children:"Is Async?"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"queries#get-by",children:(0,t.jsx)(n.code,{children:"getBy*"})})}),(0,t.jsx)(n.td,{children:"Exactly one matching element"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ReactTestInstance"})}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"queries#get-all-by",children:(0,t.jsx)(n.code,{children:"getAllBy*"})})}),(0,t.jsx)(n.td,{children:"At least one matching element"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Array<ReactTestInstance>"})}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"queries#query-by",children:(0,t.jsx)(n.code,{children:"queryBy*"})})}),(0,t.jsx)(n.td,{children:"Zero or one matching element"}),(0,t.jsx)(n.td,{children:(0,t.jsx)("code",{children:"ReactTestInstance | null"})}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"queries#query-all-by",children:(0,t.jsx)(n.code,{children:"queryAllBy*"})})}),(0,t.jsx)(n.td,{children:"No assertion"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Array<ReactTestInstance>"})}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"queries#find-by",children:(0,t.jsx)(n.code,{children:"findBy*"})})}),(0,t.jsx)(n.td,{children:"Exactly one matching element"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Promise<ReactTestInstance>"})}),(0,t.jsx)(n.td,{children:"Yes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"queries#find-all-by",children:(0,t.jsx)(n.code,{children:"findAllBy*"})})}),(0,t.jsx)(n.td,{children:"At least one matching element"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Promise<Array<ReactTestInstance>>"})}),(0,t.jsx)(n.td,{children:"Yes"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Queries work as implicit assertions on the number of matching elements and will throw an error when the assertion fails."}),"\n",(0,t.jsxs)(n.h3,{id:"get-by",children:[(0,t.jsx)(n.code,{children:"getBy*"})," queries"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByX(...): ReactTestInstance\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"getBy*"})," queries return the single matching element for a query, and throw an error if no elements match or if more than one match is found. If you need to find more than one element, then use ",(0,t.jsx)(n.code,{children:"getAllBy"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"get-all-by",children:[(0,t.jsx)(n.code,{children:"getAllBy*"})," queries"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getAllByX(...): ReactTestInstance[]\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"getAllBy*"})," queries return an array of all matching elements for a query and throw an error if no elements match."]}),"\n",(0,t.jsxs)(n.h3,{id:"query-by",children:[(0,t.jsx)(n.code,{children:"queryBy*"})," queries"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"queryByX(...): ReactTestInstance | null\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"queryBy*"})," queries return the first matching node for a query, and return ",(0,t.jsx)(n.code,{children:"null"})," if no elements match. This is useful for asserting an element that is not present. This throws if more than one match is found (use ",(0,t.jsx)(n.code,{children:"queryAllBy"})," instead)."]}),"\n",(0,t.jsxs)(n.h3,{id:"query-all-by",children:[(0,t.jsx)(n.code,{children:"queryAllBy*"})," queries"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"queryAllByX(...): ReactTestInstance[]\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"queryAllBy*"})," queries return an array of all matching nodes for a query and return an empty array (",(0,t.jsx)(n.code,{children:"[]"}),") when no elements match."]}),"\n",(0,t.jsxs)(n.h3,{id:"find-by",children:[(0,t.jsx)(n.code,{children:"findBy*"})," queries"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"findByX(\n  ...,\n  waitForOptions?: {\n    timeout?: number,\n    interval?: number,\n  },\n): Promise<ReactTestInstance>\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"findBy*"})," queries return a promise which resolves when a matching element is found. The promise is rejected if no elements match or if more than one match is found after a default timeout of 1000 ms. If you need to find more than one element use ",(0,t.jsx)(n.code,{children:"findAllBy*"})," queries."]}),"\n",(0,t.jsxs)(n.h3,{id:"find-all-by",children:[(0,t.jsx)(n.code,{children:"findAllBy*"})," queries"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"findAllByX(\n  ...,\n  waitForOptions?: {\n    timeout?: number,\n    interval?: number,\n  },\n): Promise<ReactTestInstance[]>\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"findAllBy*"})," queries return a promise which resolves to an array of matching elements. The promise is rejected if no elements match after a default timeout of 1000 ms."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"findBy*"})," and ",(0,t.jsx)(n.code,{children:"findAllBy*"})," queries accept optional ",(0,t.jsx)(n.code,{children:"waitForOptions"})," object arguments, which can contain ",(0,t.jsx)(n.code,{children:"timeout"}),", ",(0,t.jsx)(n.code,{children:"interval"})," and ",(0,t.jsx)(n.code,{children:"onTimeout"})," properties which have the same meaning as respective options for ",(0,t.jsx)(n.a,{href:"other#waitfor",children:(0,t.jsx)(n.code,{children:"waitFor"})})," function."]})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["In cases when your ",(0,t.jsx)(n.code,{children:"findBy*"})," and ",(0,t.jsx)(n.code,{children:"findAllBy*"})," queries throw when unable to find matching elements, it is helpful to pass ",(0,t.jsx)(n.code,{children:"onTimeout: () => { screen.debug(); }"})," callback using the ",(0,t.jsx)(n.code,{children:"waitForOptions"})," parameter."]})}),"\n",(0,t.jsx)(n.h2,{id:"query-predicates",children:"Query predicates"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Note: most methods like this one return a ",(0,t.jsx)(n.a,{href:"https://reactjs.org/docs/test-renderer.html#testinstance",children:(0,t.jsx)(n.code,{children:"ReactTestInstance"})})," with following properties that you may be interested in:"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"type ReactTestInstance = {\n  type: string | Function;\n  props: { [propName: string]: any };\n  parent: ReactTestInstance | null;\n  children: Array<ReactTestInstance | string>;\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"by-role",children:(0,t.jsx)(n.code,{children:"*ByRole"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"getByRole, getAllByRole, queryByRole, queryAllByRole, findByRole, findAllByRole"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByRole(\n  role: TextMatch,\n  options?: {\n    name?: TextMatch\n    disabled?: boolean,\n    selected?: boolean,\n    checked?: boolean | 'mixed',\n    busy?: boolean,\n    expanded?: boolean,\n    value: {\n      min?: number;\n      max?: number;\n      now?: number;\n      text?: TextMatch;\n    },\n    includeHiddenElements?: boolean;\n  }\n): ReactTestInstance;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," with matching ",(0,t.jsx)(n.code,{children:"role"})," or ",(0,t.jsx)(n.code,{children:"accessibilityRole"})," prop."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["In order for ",(0,t.jsx)(n.code,{children:"*ByRole"})," queries to match an element it needs to be considered an accessibility element:"]}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Text"}),", ",(0,t.jsx)(n.code,{children:"TextInput"})," and ",(0,t.jsx)(n.code,{children:"Switch"})," host elements are these by default."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"View"})," host elements need an explicit ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessible",children:(0,t.jsx)(n.code,{children:"accessible"})})," prop set to ",(0,t.jsx)(n.code,{children:"true"})]}),"\n",(0,t.jsxs)(n.li,{children:["Some React Native composite components like ",(0,t.jsx)(n.code,{children:"Pressable"})," & ",(0,t.jsx)(n.code,{children:"TouchableOpacity"})," render host ",(0,t.jsx)(n.code,{children:"View"})," element with ",(0,t.jsx)(n.code,{children:"accessible"})," prop already set."]}),"\n"]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(\n  <Pressable accessibilityRole=\"button\" disabled>\n    <Text>Hello</Text>\n  </Pressable>,\n);\nconst element = screen.getByRole('button');\nconst element2 = screen.getByRole('button', { name: 'Hello' });\nconst element3 = screen.getByRole('button', { name: 'Hello', disabled: true });\n"})}),"\n",(0,t.jsx)(n.h4,{id:"by-role-options",children:"Options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"name"}),": Finds an element with given ",(0,t.jsx)(n.code,{children:"role"}),"/",(0,t.jsx)(n.code,{children:"accessibilityRole"})," and an accessible name (= accessability label or text content)."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"disabled"}),": You can filter elements by their disabled state (coming either from ",(0,t.jsx)(n.code,{children:"aria-disabled"})," prop or ",(0,t.jsx)(n.code,{children:"accessbilityState.disabled"})," prop). The possible values are ",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),". Querying ",(0,t.jsx)(n.code,{children:"disabled: false"})," will also match elements with ",(0,t.jsx)(n.code,{children:"disabled: undefined"})," (see the ",(0,t.jsx)(n.a,{href:"https://github.com/callstack/react-native-testing-library/wiki/Accessibility:-State",children:"wiki"})," for more details)."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessibilitystate",children:"React Native's accessibilityState"})," docs to learn more about the ",(0,t.jsx)(n.code,{children:"disabled"})," state."]}),"\n",(0,t.jsxs)(n.li,{children:["This option can alternatively be expressed using the ",(0,t.jsxs)(n.a,{href:"jest-matchers#tobeenabled",children:[(0,t.jsx)(n.code,{children:"toBeEnabled()"})," / ",(0,t.jsx)(n.code,{children:"toBeDisabled()"})]})," Jest matchers."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"selected"}),": You can filter elements by their selected state (coming either from ",(0,t.jsx)(n.code,{children:"aria-selected"})," prop or ",(0,t.jsx)(n.code,{children:"accessbilityState.selected"})," prop). The possible values are ",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),". Querying ",(0,t.jsx)(n.code,{children:"selected: false"})," will also match elements with ",(0,t.jsx)(n.code,{children:"selected: undefined"})," (see the ",(0,t.jsx)(n.a,{href:"https://github.com/callstack/react-native-testing-library/wiki/Accessibility:-State",children:"wiki"})," for more details)."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessibilitystate",children:"React Native's accessibilityState"})," docs to learn more about the ",(0,t.jsx)(n.code,{children:"selected"})," state."]}),"\n",(0,t.jsxs)(n.li,{children:["This option can alternatively be expressed using the ",(0,t.jsx)(n.a,{href:"jest-matchers#tobeselected",children:(0,t.jsx)(n.code,{children:"toBeSelected()"})})," Jest matcher."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"checked"}),": You can filter elements by their checked state (coming either from ",(0,t.jsx)(n.code,{children:"aria-checked"})," prop or ",(0,t.jsx)(n.code,{children:"accessbilityState.checked"})," prop). The possible values are ",(0,t.jsx)(n.code,{children:"true"}),", ",(0,t.jsx)(n.code,{children:"false"}),", or ",(0,t.jsx)(n.code,{children:'"mixed"'}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessibilitystate",children:"React Native's accessibilityState"})," docs to learn more about the ",(0,t.jsx)(n.code,{children:"checked"})," state."]}),"\n",(0,t.jsxs)(n.li,{children:["This option can alternatively be expressed using the ",(0,t.jsxs)(n.a,{href:"jest-matchers#tobechecked",children:[(0,t.jsx)(n.code,{children:"toBeChecked()"})," / ",(0,t.jsx)(n.code,{children:"toBePartiallyChecked()"})]})," Jest matchers."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"busy"}),": You can filter elements by their busy state (coming either from ",(0,t.jsx)(n.code,{children:"aria-busy"})," prop or ",(0,t.jsx)(n.code,{children:"accessbilityState.busy"})," prop). The possible values are ",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),". Querying ",(0,t.jsx)(n.code,{children:"busy: false"})," will also match elements with ",(0,t.jsx)(n.code,{children:"busy: undefined"})," (see the ",(0,t.jsx)(n.a,{href:"https://github.com/callstack/react-native-testing-library/wiki/Accessibility:-State",children:"wiki"})," for more details)."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessibilitystate",children:"React Native's accessibilityState"})," docs to learn more about the ",(0,t.jsx)(n.code,{children:"busy"})," state."]}),"\n",(0,t.jsxs)(n.li,{children:["This option can alternatively be expressed using the ",(0,t.jsx)(n.a,{href:"jest-matchers#tobebusy",children:(0,t.jsx)(n.code,{children:"toBeBusy()"})})," Jest matcher."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expanded"}),": You can filter elements by their expanded state (coming either from ",(0,t.jsx)(n.code,{children:"aria-expanded"})," prop or ",(0,t.jsx)(n.code,{children:"accessbilityState.expanded"})," prop). The possible values are ",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessibilitystate",children:"React Native's accessibilityState"})," docs to learn more about the ",(0,t.jsx)(n.code,{children:"expanded"})," state."]}),"\n",(0,t.jsxs)(n.li,{children:["This option can alternatively be expressed using the ",(0,t.jsxs)(n.a,{href:"jest-matchers#tobeexpanded",children:[(0,t.jsx)(n.code,{children:"toBeExpanded()"})," / ",(0,t.jsx)(n.code,{children:"toBeCollapsed()"})]})," Jest matchers."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"value"}),": Filter elements by their accessibility value, based on either ",(0,t.jsx)(n.code,{children:"aria-valuemin"}),", ",(0,t.jsx)(n.code,{children:"aria-valuemax"}),", ",(0,t.jsx)(n.code,{children:"aria-valuenow"}),", ",(0,t.jsx)(n.code,{children:"aria-valuetext"})," or ",(0,t.jsx)(n.code,{children:"accessibilityValue"})," props. Accessiblity value conceptually consists of numeric ",(0,t.jsx)(n.code,{children:"min"}),", ",(0,t.jsx)(n.code,{children:"max"})," and ",(0,t.jsx)(n.code,{children:"now"})," entries, as well as string ",(0,t.jsx)(n.code,{children:"text"})," entry."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See React Native ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessibilityvalue",children:"accessibilityValue"})," docs to learn more about the accessibility value concept."]}),"\n",(0,t.jsxs)(n.li,{children:["This option can alternatively be expressed using the ",(0,t.jsx)(n.a,{href:"jest-matchers#tohaveaccessibilityvalue",children:(0,t.jsx)(n.code,{children:"toHaveAccessibilityValue()"})})," Jest matcher."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"by-label-text",children:(0,t.jsx)(n.code,{children:"*ByLabelText"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"getByLabelText, getAllByLabelText, queryByLabelText, queryAllByLabelText, findByLabelText, findAllByLabelText"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByLabelText(\n  text: TextMatch,\n  options?: {\n    exact?: boolean;\n    normalizer?: (text: string) => string;\n    includeHiddenElements?: boolean;\n  },\n): ReactTestInstance;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," with matching label:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["either by matching ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#aria-label",children:(0,t.jsx)(n.code,{children:"aria-label"})}),"/",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessibilitylabel",children:(0,t.jsx)(n.code,{children:"accessibilityLabel"})})," prop"]}),"\n",(0,t.jsxs)(n.li,{children:["or by matching text content of view referenced by ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#aria-labelledby-android",children:(0,t.jsx)(n.code,{children:"aria-labelledby"})}),"/",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessibilitylabelledby-android",children:(0,t.jsx)(n.code,{children:"accessibilityLabelledBy"})})," prop"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<MyComponent />);\nconst element = screen.getByLabelText('my-label');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"by-placeholder-text",children:(0,t.jsx)(n.code,{children:"*ByPlaceholderText"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"getByPlaceholderText, getAllByPlaceholderText, queryByPlaceholderText, queryAllByPlaceholderText, findByPlaceholderText, findAllByPlaceholderText"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByPlaceholderText(\n  text: TextMatch,\n  options?: {\n    exact?: boolean;\n    normalizer?: (text: string) => string;\n    includeHiddenElements?: boolean;\n  }\n): ReactTestInstance;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," for a ",(0,t.jsx)(n.code,{children:"TextInput"})," with a matching placeholder \u2013 may be a string or regular expression."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<MyComponent />);\nconst element = screen.getByPlaceholderText('username');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"by-display-value",children:(0,t.jsx)(n.code,{children:"*ByDisplayValue"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"getByDisplayValue, getAllByDisplayValue, queryByDisplayValue, queryAllByDisplayValue, findByDisplayValue, findAllByDisplayValue"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByDisplayValue(\n  value: TextMatch,\n  options?: {\n    exact?: boolean;\n    normalizer?: (text: string) => string;\n    includeHiddenElements?: boolean;\n  },\n): ReactTestInstance;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," for a ",(0,t.jsx)(n.code,{children:"TextInput"})," with a matching display value \u2013 may be a string or regular expression."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<MyComponent />);\nconst element = screen.getByDisplayValue('username');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"by-text",children:(0,t.jsx)(n.code,{children:"*ByText"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"getByText, getAllByText, queryByText, queryAllByText, findByText, findAllByText"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByText(\n  text: TextMatch,\n  options?: {\n    exact?: boolean;\n    normalizer?: (text: string) => string;\n    includeHiddenElements?: boolean;\n  }\n): ReactTestInstance;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," with matching text \u2013 may be a string or regular expression."]}),"\n",(0,t.jsxs)(n.p,{children:["This method will join ",(0,t.jsx)(n.code,{children:"<Text>"})," siblings to find matches, similarly to ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/text#containers",children:"how React Native handles these components"}),". This will allow for querying for strings that will be visually rendered together, but may be semantically separate React components."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<MyComponent />);\nconst element = screen.getByText('banana');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"by-hint-text",children:(0,t.jsx)(n.code,{children:"*ByHintText"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"getByA11yHint, getAllByA11yHint, queryByA11yHint, queryAllByA11yHint, findByA11yHint, findAllByA11yHint\ngetByAccessibilityHint, getAllByAccessibilityHint, queryByAccessibilityHint, queryAllByAccessibilityHint, findByAccessibilityHint, findAllByAccessibilityHint\ngetByHintText, getAllByHintText, queryByHintText, queryAllByHintText, findByHintText, findAllByHintText"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByHintText(\n  hint: TextMatch,\n  options?: {\n    exact?: boolean;\n    normalizer?: (text: string) => string;\n    includeHiddenElements?: boolean;\n  },\n): ReactTestInstance;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," with matching ",(0,t.jsx)(n.code,{children:"accessibilityHint"})," prop."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<MyComponent />);\nconst element = screen.getByHintText('Plays a song');\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Please consult ",(0,t.jsxs)(n.a,{href:"https://developer.apple.com/documentation/objectivec/nsobject/1615093-accessibilityhint",children:["Apple guidelines on how ",(0,t.jsx)(n.code,{children:"accessibilityHint"})," should be used"]}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"by-test-id",children:(0,t.jsx)(n.code,{children:"*ByTestId"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"getByTestId, getAllByTestId, queryByTestId, queryAllByTestId, findByTestId, findAllByTestId"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByTestId(\n  testId: TextMatch,\n  options?: {\n    exact?: boolean;\n    normalizer?: (text: string) => string;\n    includeHiddenElements?: boolean;\n  },\n): ReactTestInstance;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," with matching ",(0,t.jsx)(n.code,{children:"testID"})," prop. ",(0,t.jsx)(n.code,{children:"testID"})," \u2013 may be a string or a regular expression."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<MyComponent />);\nconst element = screen.getByTestId('unique-id');\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["In the spirit of ",(0,t.jsx)(n.a,{href:"https://testing-library.com/docs/guiding-principles",children:"the guiding principles"}),", it is recommended to use this only after the other queries don't work for your use case. Using ",(0,t.jsx)(n.code,{children:"testID"})," attributes do not resemble how your software is used and should be avoided if possible. However, they are particularly useful for end-to-end testing on real devices, e.g. using Detox and it's an encouraged technique to use there. Learn more from the blog post ",(0,t.jsx)(n.a,{href:"https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change",children:'"Making your UI tests resilient to change"'}),"."]})}),"\n",(0,t.jsxs)(n.h3,{id:"by-accessibility-state",children:[(0,t.jsx)(n.code,{children:"*ByA11yState"}),", ",(0,t.jsx)(n.code,{children:"ByAccessibilityState"})," (deprecated)"]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsx)(n.p,{children:"This query has been marked deprecated, as is typically too general to give meaningful results. Therefore, it's better to use one of following options:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#by-role",children:(0,t.jsx)(n.code,{children:"*ByRole"})})," query with relevant state options: ",(0,t.jsx)(n.code,{children:"disabled"}),", ",(0,t.jsx)(n.code,{children:"selected"}),", ",(0,t.jsx)(n.code,{children:"checked"}),", ",(0,t.jsx)(n.code,{children:"expanded"})," and ",(0,t.jsx)(n.code,{children:"busy"})]}),"\n",(0,t.jsxs)(n.li,{children:["use built-in Jest matchers to check the state of element found using some other query:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["enabled state: ",(0,t.jsxs)(n.a,{href:"jest-matchers#tobeenabled",children:[(0,t.jsx)(n.code,{children:"toBeEnabled()"})," / ",(0,t.jsx)(n.code,{children:"toBeDisabled()"})]})]}),"\n",(0,t.jsxs)(n.li,{children:["checked state: ",(0,t.jsxs)(n.a,{href:"jest-matchers#tobechecked",children:[(0,t.jsx)(n.code,{children:"toBeChecked()"})," / ",(0,t.jsx)(n.code,{children:"toBePartiallyChecked()"})]})]}),"\n",(0,t.jsxs)(n.li,{children:["selected state: ",(0,t.jsx)(n.a,{href:"jest-matchers#tobeselected",children:(0,t.jsx)(n.code,{children:"toBeSelected()"})})]}),"\n",(0,t.jsxs)(n.li,{children:["expanded state: ",(0,t.jsxs)(n.a,{href:"jest-matchers#tobeexpanded",children:[(0,t.jsx)(n.code,{children:"toBeExpanded()"})," / ",(0,t.jsx)(n.code,{children:"toBeCollapsed()"})]})]}),"\n",(0,t.jsxs)(n.li,{children:["busy state: ",(0,t.jsx)(n.a,{href:"jest-matchers#tobebusy",children:(0,t.jsx)(n.code,{children:"toBeBusy()"})})]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"getByA11yState, getAllByA11yState, queryByA11yState, queryAllByA11yState, findByA11yState, findAllByA11yState\ngetByAccessibilityState, getAllByAccessibilityState, queryByAccessibilityState, queryAllByAccessibilityState, findByAccessibilityState, findAllByAccessibilityState"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByA11yState(\n  state: {\n    disabled?: boolean,\n    selected?: boolean,\n    checked?: boolean | 'mixed',\n    busy?: boolean,\n    expanded?: boolean,\n  },\n  options?: {\n    includeHiddenElements?: boolean;\n  },\n): ReactTestInstance;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," with matching ",(0,t.jsx)(n.code,{children:"accessibilityState"})," prop or ARIA state props: ",(0,t.jsx)(n.code,{children:"aria-disabled"}),", ",(0,t.jsx)(n.code,{children:"aria-selected"}),", ",(0,t.jsx)(n.code,{children:"aria-checked"}),", ",(0,t.jsx)(n.code,{children:"aria-busy"}),", and ",(0,t.jsx)(n.code,{children:"aria-expanded"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<Component />);\nconst element = screen.getByA11yState({ disabled: true });\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.h4,{id:"default-state-for-disabled-selected-and-busy-keys",children:["Default state for: ",(0,t.jsx)(n.code,{children:"disabled"}),", ",(0,t.jsx)(n.code,{children:"selected"}),", and ",(0,t.jsx)(n.code,{children:"busy"})," keys"]}),(0,t.jsxs)(n.p,{children:["Passing ",(0,t.jsx)(n.code,{children:"false"})," matcher value will match both elements with explicit ",(0,t.jsx)(n.code,{children:"false"})," state value and without explicit state value."]}),(0,t.jsxs)(n.p,{children:["For instance, ",(0,t.jsx)(n.code,{children:"getByA11yState({ disabled: false })"})," will match elements with following props:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"accessibilityState={{ disabled: false, ... }}"})}),"\n",(0,t.jsxs)(n.li,{children:["no ",(0,t.jsx)(n.code,{children:"disabled"})," key under ",(0,t.jsx)(n.code,{children:"accessibilityState"})," prop, e.g. ",(0,t.jsx)(n.code,{children:"accessibilityState={{}}"})]}),"\n",(0,t.jsxs)(n.li,{children:["no ",(0,t.jsx)(n.code,{children:"accessibilityState"})," prop at all"]}),"\n"]}),(0,t.jsxs)(n.h4,{id:"default-state-for-checked-and-expanded-keys",children:["Default state for: ",(0,t.jsx)(n.code,{children:"checked"})," and ",(0,t.jsx)(n.code,{children:"expanded"})," keys"]}),(0,t.jsxs)(n.p,{children:["Passing ",(0,t.jsx)(n.code,{children:"false"})," matcher value will only match elements with explicit ",(0,t.jsx)(n.code,{children:"false"})," state value."]}),(0,t.jsxs)(n.p,{children:["For instance, ",(0,t.jsx)(n.code,{children:"getByA11yState({ checked: false })"})," will only match elements with:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"accessibilityState={{ checked: false, ... }}"})}),"\n"]}),(0,t.jsx)(n.p,{children:"but will not match elements with following props:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["no ",(0,t.jsx)(n.code,{children:"checked"})," key under ",(0,t.jsx)(n.code,{children:"accessibilityState"})," prop, e.g. ",(0,t.jsx)(n.code,{children:"accessibilityState={{}}"})]}),"\n",(0,t.jsxs)(n.li,{children:["no ",(0,t.jsx)(n.code,{children:"accessibilityState"})," prop at all"]}),"\n"]}),(0,t.jsx)(n.p,{children:"The difference in handling default values is made to reflect observed accessibility behaviour on iOS and Android platforms."})]}),"\n",(0,t.jsxs)(n.h3,{id:"by-accessibility-value",children:[(0,t.jsx)(n.code,{children:"*ByA11yValue"}),", ",(0,t.jsx)(n.code,{children:"*ByAccessibilityValue"})," (deprecated)"]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsx)(n.p,{children:"This query has been marked deprecated, as is typically too general to give meaningful results. Therefore, it's better to use one of following options:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"jest-matchers#tohaveaccessibilityvalue",children:(0,t.jsx)(n.code,{children:"toHaveAccessibilityValue()"})})," Jest matcher to check the state of element found using some other query"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#by-role",children:(0,t.jsx)(n.code,{children:"*ByRole"})})," query with ",(0,t.jsx)(n.code,{children:"value"})," option"]}),"\n"]})]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"getByA11yValue, getAllByA11yValue, queryByA11yValue, queryAllByA11yValue, findByA11yValue, findAllByA11yValue\ngetByAccessibilityValue, getAllByAccessibilityValue, queryByAccessibilityValue, queryAllByAccessibilityValue, findByAccessibilityValue, findAllByAccessibilityValue"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getByA11yValue(\n  value: {\n    min?: number;\n    max?: number;\n    now?: number;\n    text?: TextMatch;\n  },\n  options?: {\n    includeHiddenElements?: boolean;\n  },\n): ReactTestInstance;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a host element with matching accessibility value based on ",(0,t.jsx)(n.code,{children:"aria-valuemin"}),", ",(0,t.jsx)(n.code,{children:"aria-valuemax"}),", ",(0,t.jsx)(n.code,{children:"aria-valuenow"}),", ",(0,t.jsx)(n.code,{children:"aria-valuetext"})," & ",(0,t.jsx)(n.code,{children:"accessibilityValue"})," props. Only value entires provided to the query will be used to match elements. Element might have additional accessibility value entries and still be matched."]}),"\n",(0,t.jsxs)(n.p,{children:["When querying by ",(0,t.jsx)(n.code,{children:"text"})," entry a string or regex might be used."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<View accessibilityValue={{ min: 0, max: 100, now: 25, text: '25%' }} />);\nconst element = screen.getByA11yValue({ now: 25 });\nconst element2 = screen.getByA11yValue({ text: /25/ });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"common-options",children:"Common options"}),"\n",(0,t.jsxs)(n.p,{children:["Usually query first argument can be a ",(0,t.jsx)(n.strong,{children:"string"})," or a ",(0,t.jsx)(n.strong,{children:"regex"}),". All queries take at least the ",(0,t.jsx)(n.a,{href:"#hidden-option",children:(0,t.jsx)(n.code,{children:"hidden"})})," option as an optionnal second argument and some queries accept more options which change string matching behaviour. See ",(0,t.jsx)(n.a,{href:"#textmatch",children:"TextMatch"})," for more info."]}),"\n",(0,t.jsxs)(n.h4,{id:"includehiddenelements-option",children:[(0,t.jsx)(n.code,{children:"includeHiddenElements"})," option"]}),"\n",(0,t.jsxs)(n.p,{children:["All queries have the ",(0,t.jsx)(n.code,{children:"includeHiddenElements"})," option which affects whether ",(0,t.jsx)(n.a,{href:"other#ishiddenfromaccessibility",children:"elements hidden from accessibility"})," are matched by the query. By default queries will not match hidden elements, because the users of the app would not be able to see such elements."]}),"\n",(0,t.jsxs)(n.p,{children:["You can configure the default value with the ",(0,t.jsxs)(n.a,{href:"other#configure",children:[(0,t.jsx)(n.code,{children:"configure"})," function"]}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This option is also available as ",(0,t.jsx)(n.code,{children:"hidden"})," alias for compatibility with ",(0,t.jsx)(n.a,{href:"https://testing-library.com/docs/queries/byrole#hidden",children:"React Testing Library"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"render(<Text style={{ display: 'none' }}>Hidden from accessibility</Text>);\n\n// Exclude hidden elements\nexpect(\n  screen.queryByText('Hidden from accessibility', {\n    includeHiddenElements: false,\n  }),\n).not.toBeOnTheScreen();\n\n// Include hidden elements\nexpect(screen.getByText('Hidden from accessibility')).toBeOnTheScreen();\nexpect(\n  screen.getByText('Hidden from accessibility', { includeHiddenElements: true }),\n).toBeOnTheScreen();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"textmatch-type",children:"TextMatch type"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type TextMatch = string | RegExp;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Most of the query APIs take a ",(0,t.jsx)(n.code,{children:"TextMatch"})," as an argument, which means the argument can be either a ",(0,t.jsx)(n.em,{children:"string"})," or ",(0,t.jsx)(n.em,{children:"regex"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"Given the following render:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"render(<Text>Hello World</Text>);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Will ",(0,t.jsx)(n.strong,{children:"find a match"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Matching a string:\nscreen.getByText('Hello World'); // full string match\nscreen.getByText('llo Worl', { exact: false }); // substring match\nscreen.getByText('hello world', { exact: false }); // ignore case-sensitivity\n\n// Matching a regex:\nscreen.getByText(/World/); // substring match\nscreen.getByText(/world/i); // substring match, ignore case\nscreen.getByText(/^hello world$/i); // full string match, ignore case-sensitivity\nscreen.getByText(/Hello W?oRlD/i); // advanced regex\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Will ",(0,t.jsx)(n.strong,{children:"NOT find a match"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// substring does not match\nscreen.getByText('llo Worl');\n// full string does not match\nscreen.getByText('Goodbye World');\n\n// case-sensitive regex with different case\nscreen.getByText(/hello world/);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"text-match-options",children:"Options"}),"\n",(0,t.jsx)(n.h4,{id:"precision",children:"Precision"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"type TextMatchOptions = {\n  exact?: boolean;\n  normalizer?: (text: string) => string;\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Queries that take a ",(0,t.jsx)(n.code,{children:"TextMatch"})," also accept an object as the second argument that can contain options that affect the precision of string matching:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exact"}),": Defaults to ",(0,t.jsx)(n.code,{children:"true"}),"; matches full strings, case-sensitive. When false, matches substrings and is not case-sensitive.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exact"})," has no effect on regex argument."]}),"\n",(0,t.jsxs)(n.li,{children:["In most cases using a ",(0,t.jsx)(n.code,{children:"regex"})," instead of a string gives you more control over fuzzy matching and should be preferred over ",(0,t.jsx)(n.code,{children:"{ exact: false }"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"normalizer"}),": An optional function which overrides normalization behavior. See ",(0,t.jsx)(n.a,{href:"#normalization",children:"Normalization"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"exact"})," option defaults to ",(0,t.jsx)(n.code,{children:"true"})," but if you want to search for a text slice or make text matching case-insensitive you can override it. That being said we advise you to use regex in more complex scenarios."]}),"\n",(0,t.jsx)(n.h4,{id:"normalization",children:"Normalization"}),"\n",(0,t.jsx)(n.p,{children:"Before running any matching logic against text, it is automatically normalized. By default, normalization consists of trimming whitespace from the start and end of text, and collapsing multiple adjacent whitespace characters into a single space."}),"\n",(0,t.jsxs)(n.p,{children:["If you want to prevent that normalization, or provide alternative normalization (e.g. to remove Unicode control characters), you can provide a ",(0,t.jsx)(n.code,{children:"normalizer"})," function in the options object. This function will be given a string and is expected to return a normalized version of that string."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Specifying a value for ",(0,t.jsx)(n.code,{children:"normalizer"})," replaces the built-in normalization, but you can call ",(0,t.jsx)(n.code,{children:"getDefaultNormalizer"})," to obtain a built-in normalizer, either to adjust that normalization or to call it from your own normalizer."]})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"getDefaultNormalizer"})," take options object which allows the selection of behaviour:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"trim"}),": Defaults to ",(0,t.jsx)(n.code,{children:"true"}),". Trims leading and trailing whitespace."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"collapseWhitespace"}),": Defaults to ",(0,t.jsx)(n.code,{children:"true"}),". Collapses inner whitespace (newlines, tabs repeated spaces) into a single space."]}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"normalization-examples",children:"Normalization Examples"}),"\n",(0,t.jsx)(n.p,{children:"To perform a match against text without trimming:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"screen.getByText(node, 'text', {\n  normalizer: getDefaultNormalizer({ trim: false }),\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"To override normalization to remove some Unicode characters whilst keeping some (but not all) of the built-in normalization behavior:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"screen.getByText(node, 'text', {\n  normalizer: (str) => getDefaultNormalizer({ trim: false })(str).replace(/[\\u200E-\\u200F]*/g, ''),\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"legacy-unit-testing-helpers",children:"Legacy unit testing helpers"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"render"})," from ",(0,t.jsx)(n.code,{children:"@testing-library/react-native"})," exposes additional queries that ",(0,t.jsx)(n.strong,{children:"should not be used in integration or component testing"}),", but some users (like component library creators) interested in unit testing some components may find helpful."]}),"\n",(0,t.jsx)(n.p,{children:"The interface is the same as for other queries, but we won't provide full names so that they're harder to find by search engines."}),"\n",(0,t.jsx)(n.h3,{id:"unsafe_bytype",children:(0,t.jsx)(n.code,{children:"UNSAFE_ByType"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"UNSAFE_getByType, UNSAFE_getAllByType, UNSAFE_queryByType, UNSAFE_queryAllByType"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," with matching a React component type."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"This query has been marked unsafe, since it requires knowledge about implementation details of the component. Use responsibly."})}),"\n",(0,t.jsx)(n.h3,{id:"unsafe_byprops",children:(0,t.jsx)(n.code,{children:"UNSAFE_ByProps"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"UNSAFE_getByProps, UNSAFE_getAllByProps, UNSAFE_queryByProps, UNSAFE_queryAllByProps"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"ReactTestInstance"})," with matching props object."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"This query has been marked unsafe, since it requires knowledge about implementation details of the component. Use responsibly."})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>c});var t=s(7294);const i={},l=t.createContext(i);function c(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);