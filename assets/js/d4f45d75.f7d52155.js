"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[84],{5870:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=t(5893),s=t(1151);const i={id:"fire-event",title:"Fire Event"},o=void 0,c={id:"fire-event",title:"Fire Event",description:"For common events like press or type it's recommended to use User Event API as it offers",source:"@site/docs/FireEvent.md",sourceDirName:".",slug:"/fire-event",permalink:"/react-native-testing-library/docs/fire-event",draft:!1,unlisted:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/FireEvent.md",tags:[],version:"current",frontMatter:{id:"fire-event",title:"Fire Event"},sidebar:"docs",previous:{title:"User Event",permalink:"/react-native-testing-library/docs/user-event"},next:{title:"Render Hook API",permalink:"/react-native-testing-library/docs/render-hook"}},a={},l=[{value:"<code>fireEvent.press</code>",id:"press",level:3},{value:"<code>fireEvent.changeText</code>",id:"change-text",level:3},{value:"<code>fireEvent.scroll</code>",id:"scroll",level:3},{value:"On a <code>ScrollView</code>",id:"on-a-scrollview",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function fireEvent(\n  element: ReactTestInstance,\n  eventName: string,\n  ...data: unknown[],\n): void;\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["For common events like ",(0,r.jsx)(n.code,{children:"press"})," or ",(0,r.jsx)(n.code,{children:"type"})," it's recommended to use ",(0,r.jsx)(n.a,{href:"/react-native-testing-library/docs/user-event",children:"User Event API"})," as it offers\nmore realistic event simulation by emitting a sequence of events with proper event objects that mimic React Native runtime behavior."]}),(0,r.jsx)(n.p,{children:"Use Fire Event for cases not supported by User Event and for triggering event handlers on composite components."})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"fireEvent"})," API allows you to trigger all kinds of event handlers on both host and composite components. It will try to invoke a single event handler traversing the component tree bottom-up from passed element and trying to find enabled event handler named ",(0,r.jsx)(n.code,{children:"onXxx"})," when ",(0,r.jsx)(n.code,{children:"xxx"})," is the name of the event passed."]}),"\n",(0,r.jsx)(n.p,{children:"Unlike User Event, this API does not automatically pass event object to event handler, this is responsibility of the user to construct such object."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { render, screen, fireEvent } from '@testing-library/react-native';\n\ntest('fire changeText event', () => {\n  const onEventMock = jest.fn();\n  render(\n    // MyComponent renders TextInput which has a placeholder 'Enter details'\n    // and with `onChangeText` bound to handleChangeText\n    <MyComponent handleChangeText={onEventMock} />,\n  );\n\n  fireEvent(screen.getByPlaceholderText('change'), 'onChangeText', 'ab');\n  expect(onEventMock).toHaveBeenCalledWith('ab');\n});\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Please note that from version ",(0,r.jsx)(n.code,{children:"7.0"})," ",(0,r.jsx)(n.code,{children:"fireEvent"})," performs checks that should prevent events firing on disabled elements."]})}),"\n",(0,r.jsxs)(n.p,{children:["An example using ",(0,r.jsx)(n.code,{children:"fireEvent"})," with native events that aren't already aliased by the ",(0,r.jsx)(n.code,{children:"fireEvent"})," api."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { TextInput, View } from 'react-native';\nimport { fireEvent, render } from '@testing-library/react-native';\n\nconst onBlurMock = jest.fn();\n\nrender(\n  <View>\n    <TextInput placeholder=\"my placeholder\" onBlur={onBlurMock} />\n  </View>,\n);\n\n// you can omit the `on` prefix\nfireEvent(screen.getByPlaceholderText('my placeholder'), 'blur');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["FireEvent exposes convenience methods for common events like: ",(0,r.jsx)(n.code,{children:"press"}),", ",(0,r.jsx)(n.code,{children:"changeText"}),", ",(0,r.jsx)(n.code,{children:"scroll"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"press",children:(0,r.jsx)(n.code,{children:"fireEvent.press"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"fireEvent.press: (element: ReactTestInstance, ...data: Array<any>) => void\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["It is recommended to use the User Event ",(0,r.jsx)(n.a,{href:"/react-native-testing-library/docs/user-event#press",children:(0,r.jsx)(n.code,{children:"press()"})})," helper instead as it offers more realistic simulation of press interaction, including pressable support."]})}),"\n",(0,r.jsxs)(n.p,{children:["Invokes ",(0,r.jsx)(n.code,{children:"press"})," event handler on the element or parent element in the tree."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { View, Text, TouchableOpacity } from 'react-native';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\n\nconst onPressMock = jest.fn();\nconst eventData = {\n  nativeEvent: {\n    pageX: 20,\n    pageY: 30,\n  },\n};\n\nrender(\n  <View>\n    <TouchableOpacity onPress={onPressMock}>\n      <Text>Press me</Text>\n    </TouchableOpacity>\n  </View>,\n);\n\nfireEvent.press(screen.getByText('Press me'), eventData);\nexpect(onPressMock).toHaveBeenCalledWith(eventData);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"change-text",children:(0,r.jsx)(n.code,{children:"fireEvent.changeText"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"fireEvent.changeText: (element: ReactTestInstance, ...data: Array<any>) => void\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["It is recommended to use the User Event ",(0,r.jsx)(n.a,{href:"/react-native-testing-library/docs/user-event#type",children:(0,r.jsx)(n.code,{children:"type()"})})," helper instead as it offers more realistic simulation of text change interaction, including key-by-key typing, element focus, and other editing events."]})}),"\n",(0,r.jsxs)(n.p,{children:["Invokes ",(0,r.jsx)(n.code,{children:"changeText"})," event handler on the element or parent element in the tree."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { View, TextInput } from 'react-native';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\n\nconst onChangeTextMock = jest.fn();\nconst CHANGE_TEXT = 'content';\n\nrender(\n  <View>\n    <TextInput placeholder=\"Enter data\" onChangeText={onChangeTextMock} />\n  </View>,\n);\n\nfireEvent.changeText(screen.getByPlaceholderText('Enter data'), CHANGE_TEXT);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"scroll",children:(0,r.jsx)(n.code,{children:"fireEvent.scroll"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"fireEvent.scroll: (element: ReactTestInstance, ...data: Array<any>) => void\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Invokes ",(0,r.jsx)(n.code,{children:"scroll"})," event handler on the element or parent element in the tree."]}),"\n",(0,r.jsxs)(n.h4,{id:"on-a-scrollview",children:["On a ",(0,r.jsx)(n.code,{children:"ScrollView"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { ScrollView, Text } from 'react-native';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\n\nconst onScrollMock = jest.fn();\nconst eventData = {\n  nativeEvent: {\n    contentOffset: {\n      y: 200,\n    },\n  },\n};\n\nrender(\n  <ScrollView onScroll={onScrollMock}>\n    <Text>XD</Text>\n  </ScrollView>,\n);\n\nfireEvent.scroll(screen.getByText('scroll-view'), eventData);\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Prefer using ",(0,r.jsx)(n.a,{href:"/react-native-testing-library/docs/user-event#scrollto",children:(0,r.jsx)(n.code,{children:"user.scrollTo"})})," over ",(0,r.jsx)(n.code,{children:"fireEvent.scroll"})," for ",(0,r.jsx)(n.code,{children:"ScrollView"}),", ",(0,r.jsx)(n.code,{children:"FlatList"}),", and ",(0,r.jsx)(n.code,{children:"SectionList"})," components. User Event provides a more realistic event simulation based on React Native runtime behavior."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var r=t(7294);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);