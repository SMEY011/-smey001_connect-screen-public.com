"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[456],{2063:(e,n,t)=>{t.d(n,{Z:()=>r});t(7294);var i=t(1351);const s={tableOfContentsInline:"tableOfContentsInline_prmo"};var l=t(5893);function r(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:r}=e;return(0,l.jsx)("div",{className:s.tableOfContentsInline,children:(0,l.jsx)(i.Z,{toc:n,minHeadingLevel:t,maxHeadingLevel:r,className:"table-of-contents",linkClassName:null})})}},1351:(e,n,t)=>{t.d(n,{Z:()=>f});var i=t(7294),s=t(6793);function l(e){const n=e.map((e=>({...e,parentIndex:-1,children:[]}))),t=Array(7).fill(-1);n.forEach(((e,n)=>{const i=t.slice(2,e.level);e.parentIndex=Math.max(...i),t[e.level]=n}));const i=[];return n.forEach((e=>{const{parentIndex:t,...s}=e;t>=0?n[t].children.push(s):i.push(s)})),i}function r(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:i}=e;return n.flatMap((e=>{const n=r({toc:e.children,minHeadingLevel:t,maxHeadingLevel:i});return function(e){return e.level>=t&&e.level<=i}(e)?[{...e,children:n}]:n}))}function o(e){const n=e.getBoundingClientRect();return n.top===n.bottom?o(e.parentNode):n}function c(e,n){var t;let{anchorTopOffset:i}=n;const s=e.find((e=>o(e).top>=i));if(s){var l;return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(o(s))?s:null!=(l=e[e.indexOf(s)-1])?l:null}return null!=(t=e[e.length-1])?t:null}function a(){const e=(0,i.useRef)(0),{navbar:{hideOnScroll:n}}=(0,s.L)();return(0,i.useEffect)((()=>{e.current=n?0:document.querySelector(".navbar").clientHeight}),[n]),e}function d(e){const n=(0,i.useRef)(void 0),t=a();(0,i.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:i,linkActiveClassName:s,minHeadingLevel:l,maxHeadingLevel:r}=e;function o(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(i),o=function(e){let{minHeadingLevel:n,maxHeadingLevel:t}=e;const i=[];for(let s=n;s<=t;s+=1)i.push("h"+s+".anchor");return Array.from(document.querySelectorAll(i.join()))}({minHeadingLevel:l,maxHeadingLevel:r}),a=c(o,{anchorTopOffset:t.current}),d=e.find((e=>a&&a.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,t){t?(n.current&&n.current!==e&&n.current.classList.remove(s),e.classList.add(s),n.current=e):e.classList.remove(s)}(e,e===d)}))}return document.addEventListener("scroll",o),document.addEventListener("resize",o),o(),()=>{document.removeEventListener("scroll",o),document.removeEventListener("resize",o)}}),[e,t])}var h=t(8746),u=t(5893);function m(e){let{toc:n,className:t,linkClassName:i,isChild:s}=e;return n.length?(0,u.jsx)("ul",{className:s?void 0:t,children:n.map((e=>(0,u.jsxs)("li",{children:[(0,u.jsx)(h.Z,{to:"#"+e.id,className:null!=i?i:void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,u.jsx)(m,{isChild:!0,toc:e.children,className:t,linkClassName:i})]},e.id)))}):null}const p=i.memo(m);function f(e){let{toc:n,className:t="table-of-contents table-of-contents__left-border",linkClassName:o="table-of-contents__link",linkActiveClassName:c,minHeadingLevel:a,maxHeadingLevel:h,...m}=e;const f=(0,s.L)(),x=null!=a?a:f.tableOfContents.minHeadingLevel,g=null!=h?h:f.tableOfContents.maxHeadingLevel,v=function(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:s}=e;return(0,i.useMemo)((()=>r({toc:l(n),minHeadingLevel:t,maxHeadingLevel:s})),[n,t,s])}({toc:n,minHeadingLevel:x,maxHeadingLevel:g});return d((0,i.useMemo)((()=>{if(o&&c)return{linkClassName:o,linkActiveClassName:c,minHeadingLevel:x,maxHeadingLevel:g}}),[o,c,x,g])),(0,u.jsx)(p,{toc:v,className:t,linkClassName:o,...m})}},3951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=t(5893),s=t(1151),l=t(2063);const r={id:"migration-v12",title:"Migration to 12.0"},o=void 0,c={id:"migration-v12",title:"Migration to 12.0",description:"From v12.4:",source:"@site/docs/MigrationV12.md",sourceDirName:".",slug:"/migration-v12",permalink:"/react-native-testing-library/docs/migration-v12",draft:!1,unlisted:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/MigrationV12.md",tags:[],version:"current",frontMatter:{id:"migration-v12",title:"Migration to 12.0"},sidebar:"docs",previous:{title:"Migration from Jest Native matchers",permalink:"/react-native-testing-library/docs/migration-jest-native"},next:{title:"Migration to 11.0",permalink:"/react-native-testing-library/docs/migration-v11"}},a={},d=[{value:"Breaking changes",id:"breaking-changes",level:2},{value:"1. All queries exclude elements hidden from accessibility by default",id:"1-all-queries-exclude-elements-hidden-from-accessibility-by-default",level:3},{value:"2. <code>*ByRole</code> queries now return only accessibility elements",id:"2-byrole-queries-now-return-only-accessibility-elements",level:3},{value:"Examples",id:"examples",level:4},{value:"3. <code>*ByText</code>, <code>*ByDisplayValue</code>, <code>*ByPlaceholderText</code> queries now return host elements",id:"3-bytext-bydisplayvalue-byplaceholdertext-queries-now-return-host-elements",level:3},{value:"4. <code>container</code> API has been renamed to <code>UNSAFE_root</code>.",id:"4-container-api-has-been-renamed-to-unsafe_root",level:3},{value:"Full Changelog",id:"full-changelog",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.p,{children:"From v12.4:"}),(0,i.jsxs)(n.p,{children:["If you are already using legacy Jest Native matchers we have a ",(0,i.jsx)(n.a,{href:"migration-jest-native",children:"migration guide"})," for moving to the built-in matchers."]}),(0,i.jsxs)(n.p,{children:["Before v12.4:\nIf you use ",(0,i.jsx)(n.a,{href:"https://github.com/testing-library/jest-native",children:"Jest Native matchers"}),", which we recommend, then you should upgrade it to version 5.4.2 or higher."]})]}),"\n",(0,i.jsxs)(n.p,{children:["React Native Testing Library 12 introduces a handful of breaking changes compared to 11.x versions. We believe they were necessary to improve the experience using the library and help the users ",(0,i.jsx)(n.a,{href:"https://blog.codinghorror.com/falling-into-the-pit-of-success/",children:"fall into the pit of success"})," when writing meaningful tests. You will find migration instructions for each and every change described below."]}),"\n",(0,i.jsx)(l.Z,{toc:d}),"\n",(0,i.jsx)(n.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,i.jsx)(n.h3,{id:"1-all-queries-exclude-elements-hidden-from-accessibility-by-default",children:"1. All queries exclude elements hidden from accessibility by default"}),"\n",(0,i.jsxs)(n.p,{children:["Elements that are hidden from accessiblity, e.g. elements on non-active screen when using React Navigation, now will not be matched by default by all queries. This is the effect of switching the default value for global config option ",(0,i.jsx)(n.code,{children:"defaultIncludeHiddenElements"}),"(api#defaultincludehiddenelements-option) to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Previous behaviour of matching hidden elements can be enabled on query level using ",(0,i.jsx)(n.a,{href:"api-queries#includehiddenelements-option",children:"includeHiddenElements"})," query options or globally using ",(0,i.jsx)(n.code,{children:"defaultIncludeHiddenElements"}),"(api#defaultincludehiddenelements-option) configuration option."]}),"\n",(0,i.jsxs)(n.h3,{id:"2-byrole-queries-now-return-only-accessibility-elements",children:["2. ",(0,i.jsx)(n.code,{children:"*ByRole"})," queries now return only accessibility elements"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"*ByRole"})," queries now return only accessibility elements, either explicitly marked with ",(0,i.jsx)(n.code,{children:"accessible"})," prop or implicit ones where this status is derived from component type itself (e.g ",(0,i.jsx)(n.code,{children:"Text"}),", ",(0,i.jsx)(n.code,{children:"TextInput"}),", ",(0,i.jsx)(n.code,{children:"Switch"}),", but not ",(0,i.jsx)(n.code,{children:"View"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["You may need to adjust relevant components under test to make sure they pass ",(0,i.jsx)(n.code,{children:"isAccessibilityElement"})," check."]}),"\n",(0,i.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(n.p,{children:["Let's assume we are using ",(0,i.jsx)(n.code,{children:'getByRole("button")'})," query."]}),"\n",(0,i.jsx)(n.p,{children:"Following elements will match:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// Explicit "accessible" prop for View\n<View accessible accessibilityRole="button" />\n\n// No need to "accessible" prop for Text, as it is implicitly accessible element.\n<Text accessibilityRole="button">Button</Text>\n'})}),"\n",(0,i.jsx)(n.p,{children:"While following elements will not match:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// Missing "accessible" prop for View\n<View accessibilityRole="button" />\n\n// Explicit "accessible={false}" prop for View\n<View accessible={false} accessibilityRole="button" />\n\n// Explicit "accessible={false}" for Text, which is implicitly accessible element\n<Text accessible={false} accessibilityRole="button">Button</Text>\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"3-bytext-bydisplayvalue-byplaceholdertext-queries-now-return-host-elements",children:["3. ",(0,i.jsx)(n.code,{children:"*ByText"}),", ",(0,i.jsx)(n.code,{children:"*ByDisplayValue"}),", ",(0,i.jsx)(n.code,{children:"*ByPlaceholderText"})," queries now return host elements"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"*ByText"}),", ",(0,i.jsx)(n.code,{children:"*ByDisplayValue"}),", ",(0,i.jsx)(n.code,{children:"*ByPlaceholderText"})," queries now return ",(0,i.jsx)(n.a,{href:"testing-env#host-and-composite-components",children:"host elements"}),", which is consistent with other queries."]}),"\n",(0,i.jsx)(n.p,{children:"While potentially breaking, this should not cause issues in tests if you are using recommended queries and Jest Matchers from Jest Native package."}),"\n",(0,i.jsxs)(n.p,{children:["Problematic cases may include: directly checking some prop values (without using Jest Native matchers), referencing other nodes using ",(0,i.jsx)(n.code,{children:"parent"})," or ",(0,i.jsx)(n.code,{children:"children"})," props, examining ",(0,i.jsx)(n.code,{children:"type"})," property of ",(0,i.jsx)(n.code,{children:"ReactTestInstance"}),", etc."]}),"\n",(0,i.jsxs)(n.h3,{id:"4-container-api-has-been-renamed-to-unsafe_root",children:["4. ",(0,i.jsx)(n.code,{children:"container"})," API has been renamed to ",(0,i.jsx)(n.code,{children:"UNSAFE_root"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Historically ",(0,i.jsx)(n.code,{children:"container"})," was supposed to mimic the ",(0,i.jsx)(n.a,{href:"https://testing-library.com/docs/react-testing-library/api/#container",children:"RTL's container"}),". However it turned out not so relevant in RNTL's environment, where we actually used it to return React Test Renderer's root instance."]}),"\n",(0,i.jsxs)(n.p,{children:["RNTL v12 introduces ",(0,i.jsx)(n.code,{children:"root"})," API as an alternative that returns a root ",(0,i.jsx)(n.strong,{children:"host"})," element. The difference between ",(0,i.jsx)(n.code,{children:"root"})," and ",(0,i.jsx)(n.code,{children:"UNSAFE_root"})," properties is that that ",(0,i.jsx)(n.code,{children:"root"})," will always represents a host element, while ",(0,i.jsx)(n.code,{children:"UNSAFE_root"})," will typically represent a composite element."]}),"\n",(0,i.jsxs)(n.p,{children:["If you use ",(0,i.jsx)(n.code,{children:"toBeOnTheScreen"})," matcher from ",(0,i.jsx)(n.a,{href:"https://github.com/testing-library/jest-native",children:"@testing-library/jest-native"})," your tests will fail because it uses the ",(0,i.jsx)(n.code,{children:"container"})," api. To fix this, update ",(0,i.jsx)(n.code,{children:"@testing-library/jest-native"})," to version 5.4.2."]}),"\n",(0,i.jsx)(n.h2,{id:"full-changelog",children:"Full Changelog"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/callstack/react-native-testing-library/compare/v11.5.2...v12.0.0",children:"https://github.com/callstack/react-native-testing-library/compare/v11.5.2...v12.0.0"})})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var i=t(7294);const s={},l=i.createContext(s);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);