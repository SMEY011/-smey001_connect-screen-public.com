"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[288],{1469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=n(5893),s=n(1151);const r={id:"faq",title:"FAQ"},a=void 0,o={id:"faq",title:"FAQ",description:"Can I test the native features of React Native apps?",source:"@site/docs/FAQ.md",sourceDirName:".",slug:"/faq",permalink:"/react-native-testing-library/docs/faq",draft:!1,unlisted:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/FAQ.md",tags:[],version:"current",frontMatter:{id:"faq",title:"FAQ"},sidebar:"docs",previous:{title:"Troubleshooting",permalink:"/react-native-testing-library/docs/troubleshooting"},next:{title:"Testing Environment",permalink:"/react-native-testing-library/docs/testing-env"}},c={},l=[{value:"Can I test the native features of React Native apps?",id:"can-i-test-the-native-features-of-react-native-apps",level:4},{value:"Should I use/migrate to <code>screen</code> queries?",id:"should-i-usemigrate-to-screen-queries",level:3},{value:"Should I use/migrate to User Event interactions?",id:"should-i-usemigrate-to-user-event-interactions",level:3}];function d(e){const t={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h4,{id:"can-i-test-the-native-features-of-react-native-apps",children:"Can I test the native features of React Native apps?"}),"\n",(0,i.jsx)(t.p,{children:"Short answer: no."}),"\n",(0,i.jsx)(t.p,{children:"React Native Testing Library does not provide an entire React Native runtime since that would require running on a physical device\nor iOS simulator/Android emulator to provision the underlying OS and platform APIs."}),"\n",(0,i.jsxs)(t.p,{children:["Instead of using React Native renderer, it simulates only the JavaScript part of its runtime\nusing ",(0,i.jsx)(t.a,{href:"https://reactjs.org/docs/test-renderer.html",children:"React Test Renderer"})," while providing queries\nand event APIs (",(0,i.jsx)(t.code,{children:"userEvent"}),", ",(0,i.jsx)(t.code,{children:"fireEvent"}),") that mimicking certain behaviors from the actual runtime."]}),"\n",(0,i.jsxs)(t.p,{children:["You can learn more about our testing environment ",(0,i.jsx)(t.a,{href:"/react-native-testing-library/docs/testing-env",children:"here"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"This approach has specific benefits and shortfalls. On the positive side:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"it allows testing most of the logic of regular React Native apps"}),"\n",(0,i.jsx)(t.li,{children:"it allows running tests on any OS supported by Jest or other test runners, e.g., on CI"}),"\n",(0,i.jsx)(t.li,{children:"it uses much less resources than full runtime simulation"}),"\n",(0,i.jsx)(t.li,{children:"you can use Jest fake timers"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"On the negative side:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"you cannot test native features"}),"\n",(0,i.jsx)(t.li,{children:"it might not perfectly simulate certain JavaScript features, but we are working on it"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"user-event",children:"User Event interactions"})," solve some of the simulation issues, as they offer more realistic event handling than the basic ",(0,i.jsx)(t.a,{href:"api#fireevent-api",children:"Fire Event API"}),"."]}),"\n",(0,i.jsxs)(t.h3,{id:"should-i-usemigrate-to-screen-queries",children:["Should I use/migrate to ",(0,i.jsx)(t.code,{children:"screen"})," queries?"]}),"\n",(0,i.jsxs)(t.p,{children:["There is no need to migrate existing test code to use ",(0,i.jsx)(t.code,{children:"screen"}),"-bases queries. You can still use\nqueries and other functions returned by ",(0,i.jsx)(t.code,{children:"render"}),". The ",(0,i.jsx)(t.code,{children:"screen"})," object captures the latest ",(0,i.jsx)(t.code,{children:"render"})," result."]}),"\n",(0,i.jsxs)(t.p,{children:["For new code, you are encouraged to use ",(0,i.jsx)(t.code,{children:"screen"})," as there are some good reasons for that, which are described in ",(0,i.jsx)(t.a,{href:"https://kentcdodds.com/blog/common-mistakes-with-react-testing-library#not-using-screen",children:"this article"})," by Kent C. Dodds."]}),"\n",(0,i.jsx)(t.h3,{id:"should-i-usemigrate-to-user-event-interactions",children:"Should I use/migrate to User Event interactions?"}),"\n",(0,i.jsxs)(t.p,{children:["We encourage you to migrate existing tests to use the ",(0,i.jsx)(t.a,{href:"user-event",children:"User Event interactions"}),", which offer more realistic event handling than the basic ",(0,i.jsx)(t.a,{href:"api#fireevent-api",children:"Fire Event API"}),". Hence, it will provide more confidence in the quality of your code."]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var i=n(7294);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);