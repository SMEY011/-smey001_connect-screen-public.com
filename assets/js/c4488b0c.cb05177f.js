"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[962],{3146:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var r=t(5893),s=t(1151);const o={id:"screen",title:"Screen object"},i=void 0,c={id:"screen",title:"Screen object",description:"The screen object offers a recommended way to access queries and utilities for the currently rendered UI.",source:"@site/docs/Screen.md",sourceDirName:".",slug:"/screen",permalink:"/react-native-testing-library/docs/screen",draft:!1,unlisted:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/Screen.md",tags:[],version:"current",frontMatter:{id:"screen",title:"Screen object"},sidebar:"docs",previous:{title:"Render function",permalink:"/react-native-testing-library/docs/render"},next:{title:"Queries",permalink:"/react-native-testing-library/docs/queries"}},d={},a=[{value:"<code>...queries</code>",id:"queries",level:3},{value:"Example",id:"example",level:4},{value:"<code>rerender</code>",id:"rerender",level:3},{value:"<code>unmount</code>",id:"unmount",level:3},{value:"<code>debug</code>",id:"debug",level:3},{value:"<code>message</code> option",id:"debug-message-option",level:4},{value:"<code>mapProps</code> option",id:"debug-map-props-option",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"<code>root</code>",id:"root",level:3},{value:"<code>UNSAFE_root</code>",id:"unsafe_root",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let screen: {\n  ...queries;\n  rerender(element: React.Element<unknown>): void;\n  unmount(): void;\n  debug(options?: DebugOptions): void\n  toJSON(): ReactTestRendererJSON | null;\n  root: ReactTestInstance;\n  UNSAFE_root: ReactTestInstance;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"screen"})," object offers a recommended way to access queries and utilities for the currently rendered UI."]}),"\n",(0,r.jsxs)(n.p,{children:["This object is assigned after the ",(0,r.jsx)(n.code,{children:"render"})," call and cleared after each test by calling ",(0,r.jsx)(n.a,{href:"other#cleanup",children:(0,r.jsx)(n.code,{children:"cleanup"})}),". If no ",(0,r.jsx)(n.code,{children:"render"})," call has been made in a given test, then it holds a special object and throws a helpful error on each property and method access."]}),"\n",(0,r.jsx)(n.h3,{id:"queries",children:(0,r.jsx)(n.code,{children:"...queries"})}),"\n",(0,r.jsxs)(n.p,{children:["The most important feature of ",(0,r.jsx)(n.code,{children:"screen"})," is providing a set of helpful queries that allow you to find certain elements in the view hierarchy."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/react-native-testing-library/docs/queries",children:"Queries"})," for a complete list."]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<MyComponent />);\nconst buttonStart = screen.getByRole('button', { name: 'start' });\n"})}),"\n",(0,r.jsx)(n.h3,{id:"rerender",children:(0,r.jsx)(n.code,{children:"rerender"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["Also available under ",(0,r.jsx)(n.code,{children:"update"})," alias"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function rerender(element: React.Element<unknown>): void\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Re-render the in-memory tree with a new root element. This simulates a React update render at the root. If the new element has the same type (and ",(0,r.jsx)(n.code,{children:"key"}),") as the previous element, the tree will be updated; otherwise, it will re-mount a new tree, in both cases triggering the appropriate lifecycle events."]}),"\n",(0,r.jsx)(n.h3,{id:"unmount",children:(0,r.jsx)(n.code,{children:"unmount"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function unmount(): void\n"})}),"\n",(0,r.jsx)(n.p,{children:"Unmount the in-memory tree, triggering the appropriate lifecycle events."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Usually you should not need to call ",(0,r.jsx)(n.code,{children:"unmount"})," as it is done automatically if your test runner supports ",(0,r.jsx)(n.code,{children:"afterEach"})," hook (like Jest, mocha, Jasmine)."]})}),"\n",(0,r.jsx)(n.h3,{id:"debug",children:(0,r.jsx)(n.code,{children:"debug"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function debug(options?: {\n  message?: string;\n  mapProps?: MapPropsFunction;\n}): void\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Pretty prints deeply rendered component passed to ",(0,r.jsx)(n.code,{children:"render"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"debug-message-option",children:[(0,r.jsx)(n.code,{children:"message"})," option"]}),"\n",(0,r.jsx)(n.p,{children:"You can provide a message that will be printed on top."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"render(<Component />);\nscreen.debug({ message: 'optional message' });\n"})}),"\n",(0,r.jsx)(n.p,{children:"logs optional message and colored JSX:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"optional message\n\n<View\n  onPress={[Function bound fn]}\n>\n  <Text>Press me</Text>\n</View>\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"debug-map-props-option",children:[(0,r.jsx)(n.code,{children:"mapProps"})," option"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function debug({ mapProps: (props) => ({}) });\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"mapProps"})," option to transform the props that will be printed :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"render(<View style={{ backgroundColor: 'red' }} />);\nscreen.debug({ mapProps: ({ style, ...props }) => ({ props }) });\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will log the rendered JSX without the ",(0,r.jsx)(n.code,{children:"style"})," props."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"children"})," prop cannot be filtered out so the following will print all rendered components with all props but ",(0,r.jsx)(n.code,{children:"children"})," filtered out."]}),"\n",(0,r.jsxs)(n.p,{children:["This option can be used to target specific props when debugging a query (for instance, keeping only the ",(0,r.jsx)(n.code,{children:"children"})," prop when debugging a ",(0,r.jsx)(n.code,{children:"getByText"})," query)."]}),"\n",(0,r.jsx)(n.p,{children:"You can also transform prop values so that they are more readable (e.g., flatten styles)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { StyleSheet } from 'react-native';\n\nscreen.debug({ mapProps : {({ style, ...props })} => ({ style : StyleSheet.flatten(style), ...props }) });\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or remove props that have little value when debugging tests, e.g. path prop for svgs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"screen.debug({ mapProps: ({ path, ...props }) => ({ ...props }) });\n"})}),"\n",(0,r.jsx)(n.h3,{id:"tojson",children:(0,r.jsx)(n.code,{children:"toJSON"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function toJSON(): ReactTestRendererJSON | null\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the rendered component JSON representation, e.g. for snapshot testing."}),"\n",(0,r.jsx)(n.h3,{id:"root",children:(0,r.jsx)(n.code,{children:"root"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const root: ReactTestInstance;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the rendered root ",(0,r.jsx)(n.a,{href:"testing-env#host-and-composite-components",children:"host element"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This API is primarily useful for component tests, as it allows you to access root host view without using ",(0,r.jsx)(n.code,{children:"*ByTestId"})," queries or similar methods."]}),"\n",(0,r.jsx)(n.h3,{id:"unsafe_root",children:(0,r.jsx)(n.code,{children:"UNSAFE_root"})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:"This API typically will return a composite view, which goes against recommended testing practices. This API is primarily available for legacy test suites that rely on such testing."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const UNSAFE_root: ReactTestInstance;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the rendered ",(0,r.jsx)(n.a,{href:"testing-env#host-and-composite-components",children:"composite root element"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This API has been previously named ",(0,r.jsx)(n.code,{children:"container"})," for compatibility with ",(0,r.jsx)(n.a,{href:"https://testing-library.com/docs/react-testing-library/other#container-1",children:"React Testing Library"}),". However, despite the same name, the actual behavior has been significantly different; hence, we decided to change the name to ",(0,r.jsx)(n.code,{children:"UNSAFE_root"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>i});var r=t(7294);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);