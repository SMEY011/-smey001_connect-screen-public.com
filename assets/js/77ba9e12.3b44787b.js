"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[625],{7834:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var o=n(5893),s=n(1151);const i={id:"redux-integration",title:"Redux Integration"},r=void 0,d={id:"redux-integration",title:"Redux Integration",description:"This examples has not been updated for a long time and not showcase current recommended testing practices. We plan to update this document soon.",source:"@site/docs/ReduxIntegration.md",sourceDirName:".",slug:"/redux-integration",permalink:"/react-native-testing-library/docs/redux-integration",draft:!1,unlisted:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/ReduxIntegration.md",tags:[],version:"current",frontMatter:{id:"redux-integration",title:"Redux Integration"}},a={},c=[{value:"Setting up",id:"setting-up",level:2},{value:"Test cases",id:"test-cases",level:2},{value:"Running tests",id:"running-tests",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.admonition,{type:"caution",children:(0,o.jsx)(t.p,{children:"This examples has not been updated for a long time and not showcase current recommended testing practices. We plan to update this document soon."})}),"\n",(0,o.jsx)(t.p,{children:"This section deals with testing RN applications developed with Redux. We will be developing a simple TODO application capable of adding and removing an item. Once included, the timestamp is included."}),"\n",(0,o.jsx)(t.h2,{id:"setting-up",children:"Setting up"}),"\n",(0,o.jsxs)(t.p,{children:["An example of setting up can be found ",(0,o.jsx)(t.a,{href:"https://github.com/callstack/react-native-testing-library/tree/main/examples/redux",children:"here"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"test-cases",children:"Test cases"}),"\n",(0,o.jsxs)(t.p,{children:["Our test is on the components that either dispatch actions on the redux store or read some data from the redux store. This means we will test ",(0,o.jsx)(t.code,{children:"./components/AddTodo.js"})," and ",(0,o.jsx)(t.code,{children:"./components/TodoList.js"}),". Thus we will create ",(0,o.jsx)(t.code,{children:"./components/AddTodo.test.js"})," and ",(0,o.jsx)(t.code,{children:"./components/TodoList.test.js"})]}),"\n",(0,o.jsxs)(t.p,{children:["For ",(0,o.jsx)(t.code,{children:"./components/AddTodo.test.js"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\nimport configureStore from '../store';\nimport AddTodo from './AddTodo';\n\ndescribe('AddTodo component test', () => {\n  test('adds a new TODO when the button is pressed', () => {\n    const store = configureStore();\n\n    const component = (\n      <Provider store={store}>\n        <AddTodo />\n      </Provider>\n    );\n\n    render(component);\n\n    // There is a TextInput.\n    // https://github.com/callstack/react-native-testing-library/blob/ae3d4af370487e1e8fedd8219f77225690aefc59/examples/redux/components/AddTodo.js#L24\n    const input = screen.getByPlaceholderText(/repository/i);\n    expect(input).toBeOnTheScreen();\n\n    const textToEnter = 'This is a random element';\n    fireEvent.changeText(input, textToEnter);\n    fireEvent.press(screen.getByText('Submit form'));\n\n    const todosState = store.getState().todos;\n\n    expect(todosState.length).toEqual(1);\n\n    expect(todosState).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          id: 1,\n          text: textToEnter,\n          date: expect.any(Date),\n        }),\n      ]),\n    );\n  });\n});\n"})}),"\n",(0,o.jsxs)(t.p,{children:["For ",(0,o.jsx)(t.code,{children:"./components/TodoList.test.js"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\nimport configureStore from '../store';\nimport TodoList from './TodoList';\n\ndescribe('TodoList component test', () => {\n  test('it should execute with a store with 4 elements', () => {\n    const initialState = {\n      todos: [\n        { id: 1, text: 'Sing something', date: new Date() },\n        { id: 2, text: 'Dance something', date: new Date() },\n        { id: 3, text: 'Sleep something', date: new Date() },\n        { id: 4, text: 'Sleep something', date: new Date() },\n      ],\n    };\n    const store = configureStore(initialState);\n\n    const component = (\n      <Provider store={store}>\n        <TodoList />\n      </Provider>\n    );\n\n    render(component);\n    const todoElems = screen.getAllByText(/something/i);\n\n    expect(todoElems.length).toEqual(4);\n  });\n\n  test('should execute with 2 elements and end up with 1 after delete', () => {\n    const initialState = {\n      todos: [\n        { id: 1, text: 'Sing something', date: new Date() },\n        { id: 2, text: 'Dance something', date: new Date() },\n      ],\n    };\n    const store = configureStore(initialState);\n\n    const component = (\n      <Provider store={store}>\n        <TodoList />\n      </Provider>\n    );\n\n    render(component);\n    const todoElems = screen.getAllByText(/something/i);\n\n    expect(todoElems.length).toBe(2);\n\n    const buttons = screen.getAllByText('Delete');\n    expect(buttons.length).toBe(2);\n\n    fireEvent.press(buttons[0]);\n    expect(screen.getAllByText('Delete').length).toBe(1);\n  });\n});\n"})}),"\n",(0,o.jsx)(t.h2,{id:"running-tests",children:"Running tests"}),"\n",(0,o.jsx)(t.p,{children:"To run the tests, place a test script inside your package.json"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:'{\n  "scripts": {\n    "test": "jest"\n  }\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"And run the test script with npm test or yarn test."})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{a:()=>r});var o=n(7294);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);