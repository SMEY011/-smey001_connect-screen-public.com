"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[777],{9496:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var r=t(5893),o=t(1151);const i={id:"render",title:"Render function"},s=void 0,c={id:"render",title:"Render function",description:"The render function is the entry point for writing React Native Testing Library tests. It deeply renders the given React element and returns helpers to query the output components' structure.",source:"@site/docs/Render.md",sourceDirName:".",slug:"/render",permalink:"/react-native-testing-library/docs/render",draft:!1,unlisted:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/Render.md",tags:[],version:"current",frontMatter:{id:"render",title:"Render function"},sidebar:"docs",previous:{title:"Overview",permalink:"/react-native-testing-library/docs/api"},next:{title:"Screen object",permalink:"/react-native-testing-library/docs/screen"}},d={},a=[{value:"Options",id:"render-options",level:3},{value:"<code>wrapper</code> option",id:"wrapper-option",level:4},{value:"<code>createNodeMock</code> option",id:"createnodemock-option",level:4},{value:"<code>unstable_validateStringsRenderedWithinText</code> option",id:"unstable_validatestringsrenderedwithintext-option",level:4},{value:"Result",id:"render-result",level:3}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function render(\n  component: React.Element<any>,\n  options?: RenderOptions\n): RenderResult\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"render"})," function is the entry point for writing React Native Testing Library tests. It deeply renders the given React element and returns helpers to query the output components' structure."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { render } from '@testing-library/react-native';\n\ntest('basic test', () => {\n  render(<MyApp />);\n  expect(screen.getAllByRole('button', { name: 'start' })).toBeOnTheScreen();\n});\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["When using React context providers, like Redux Provider, you'll likely want to wrap rendered component with them. In such cases, it's convenient to create your own custom\xa0",(0,r.jsx)(n.code,{children:"render"}),"\xa0method. ",(0,r.jsx)(n.a,{href:"https://testing-library.com/docs/react-testing-library/setup#custom-render",children:"Follow this great guide on how to set this up"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"render-options",children:"Options"}),"\n",(0,r.jsxs)(n.p,{children:["The behavior of the ",(0,r.jsx)(n.code,{children:"render"})," method can be customized by passing various options as a second argument of the ",(0,r.jsx)(n.code,{children:"RenderOptions"})," type:"]}),"\n",(0,r.jsxs)(n.h4,{id:"wrapper-option",children:[(0,r.jsx)(n.code,{children:"wrapper"})," option"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"wrapper?: React.ComponentType<any>,\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This option allows you to wrap the tested component, passed as the first option to the\xa0",(0,r.jsx)(n.code,{children:"render()"}),"\xa0function, in an additional wrapper component. This is useful for creating reusable custom render functions for common React Context providers."]}),"\n",(0,r.jsxs)(n.h4,{id:"createnodemock-option",children:[(0,r.jsx)(n.code,{children:"createNodeMock"})," option"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"createNodeMock?: (element: React.Element) => unknown,\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This option allows you to pass ",(0,r.jsx)(n.code,{children:"createNodeMock"})," option to ",(0,r.jsx)(n.code,{children:"ReactTestRenderer.create()"})," method in order to allow for custom mock refs. You can learn more about this option from ",(0,r.jsx)(n.a,{href:"https://reactjs.org/docs/test-renderer.html#ideas",children:"React Test Renderer documentation"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"unstable_validatestringsrenderedwithintext-option",children:[(0,r.jsx)(n.code,{children:"unstable_validateStringsRenderedWithinText"})," option"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"unstable_validateStringsRenderedWithinText?: boolean;\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This options is experimental, in some cases it might not work as intended, and its behavior might change without observing ",(0,r.jsx)(n.a,{href:"https://semver.org/",children:"SemVer"})," requirements for breaking changes."]})}),"\n",(0,r.jsxs)(n.p,{children:["This ",(0,r.jsx)(n.strong,{children:"experimental"})," option allows you to replicate React Native behavior of throwing ",(0,r.jsx)(n.code,{children:"Invariant Violation: Text strings must be rendered within a <Text> component"})," error when you try to render ",(0,r.jsx)(n.code,{children:"string"})," value under components different than ",(0,r.jsx)(n.code,{children:"<Text>"}),", e.g., under ",(0,r.jsx)(n.code,{children:"<View>"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"React Test Renderer does not enforce this check; hence, by default, React Native Testing Library also does not check this. That might result in runtime errors when running your code on a device, while the code works without errors in tests."}),"\n",(0,r.jsx)(n.h3,{id:"render-result",children:"Result"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"render"})," function returns the same queries and utilities as the ",(0,r.jsx)(n.a,{href:"screen",children:(0,r.jsx)(n.code,{children:"screen"})})," object. We recommended using the ",(0,r.jsx)(n.code,{children:"screen"})," object as more developer-friendly way."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://kentcdodds.com/blog/common-mistakes-with-react-testing-library#not-using-screen",children:"this article"})," from Kent C. Dodds for more details."]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{a:()=>s});var r=t(7294);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}}}]);