"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[288],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3581:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={id:"faq",title:"FAQ"},u=void 0,l={unversionedId:"faq",id:"faq",title:"FAQ",description:"Can I test the native features of React Native apps?",source:"@site/docs/FAQ.md",sourceDirName:".",slug:"/faq",permalink:"/react-native-testing-library/docs/faq",draft:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/FAQ.md",tags:[],version:"current",frontMatter:{id:"faq",title:"FAQ"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/react-native-testing-library/docs/getting-started"},next:{title:"API",permalink:"/react-native-testing-library/docs/api"}},c={},p=[{value:"Can I test the native features of React Native apps?",id:"can-i-test-the-native-features-of-react-native-apps",level:4},{value:"Should I use/migrate to <code>screen</code> queries?",id:"should-i-usemigrate-to-screen-queries",level:3},{value:"Should I use/migrate to User Event interactions?",id:"should-i-usemigrate-to-user-event-interactions",level:3}],d={toc:p},f="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(f,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"can-i-test-the-native-features-of-react-native-apps"},"Can I test the native features of React Native apps?"),(0,i.kt)("p",null,"Short answer: no."),(0,i.kt)("p",null,"React Native Testing Library does not provide an entire React Native runtime since that would require running on a physical device\nor iOS simulator/Android emulator to provision the underlying OS and platform APIs."),(0,i.kt)("p",null,"Instead of using React Native renderer, it simulates only the JavaScript part of its runtime\nusing ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/test-renderer.html"},"React Test Renderer")," while providing queries\nand event APIs (",(0,i.kt)("inlineCode",{parentName:"p"},"userEvent"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"fireEvent"),") that mimicking certain behaviors from the actual runtime."),(0,i.kt)("p",null,"You can learn more about our testing environment ",(0,i.kt)("a",{parentName:"p",href:"/react-native-testing-library/docs/testing-env"},"here"),"."),(0,i.kt)("p",null,"This approach has specific benefits and shortfalls. On the positive side:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"it allows testing most of the logic of regular React Native apps"),(0,i.kt)("li",{parentName:"ul"},"it allows running tests on any OS supported by Jest or other test runners, e.g., on CI"),(0,i.kt)("li",{parentName:"ul"},"it uses much less resources than full runtime simulation"),(0,i.kt)("li",{parentName:"ul"},"you can use Jest fake timers")),(0,i.kt)("p",null,"On the negative side:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"you cannot test native features"),(0,i.kt)("li",{parentName:"ul"},"it might not perfectly simulate certain JavaScript features, but we are working on it")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"user-event"},"User Event interactions")," solve some of the simulation issues, as they offer more realistic event handling than the basic ",(0,i.kt)("a",{parentName:"p",href:"api#fireevent-api"},"Fire Event API"),"."),(0,i.kt)("h3",{id:"should-i-usemigrate-to-screen-queries"},"Should I use/migrate to ",(0,i.kt)("inlineCode",{parentName:"h3"},"screen")," queries?"),(0,i.kt)("p",null,"There is no need to migrate existing test code to use ",(0,i.kt)("inlineCode",{parentName:"p"},"screen"),"-bases queries. You can still use\nqueries and other functions returned by ",(0,i.kt)("inlineCode",{parentName:"p"},"render"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"screen")," object captures the latest ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," result."),(0,i.kt)("p",null,"For new code, you are encouraged to use ",(0,i.kt)("inlineCode",{parentName:"p"},"screen")," as there are some good reasons for that, which are described in ",(0,i.kt)("a",{parentName:"p",href:"https://kentcdodds.com/blog/common-mistakes-with-react-testing-library#not-using-screen"},"this article")," by Kent C. Dodds."),(0,i.kt)("h3",{id:"should-i-usemigrate-to-user-event-interactions"},"Should I use/migrate to User Event interactions?"),(0,i.kt)("p",null,"We encourage you to migrate existing tests to use the ",(0,i.kt)("a",{parentName:"p",href:"user-event"},"User Event interactions"),", which offer more realistic event handling than the basic ",(0,i.kt)("a",{parentName:"p",href:"api#fireevent-api"},"Fire Event API"),". Hence, it will provide more confidence in the quality of your code."))}m.isMDXComponent=!0}}]);